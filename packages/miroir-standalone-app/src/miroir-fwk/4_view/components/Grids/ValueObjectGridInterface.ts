import { z } from "zod";

import {
  entityDefinition,
  entityDefinitionEntityDefinition,
  jzodElement,
  jzodObject,
  type EntityDefinition,
  type Uuid,
} from "miroir-core";

// ################################################################################################
// Value Object Grid Row structure
export const valueObjectGridRowSchema = z.object({
  localId: z.string(), // Local identifier for row identification
  displayedValue: z.any(),
  rawValue: z.any(), // The value object itself (not necessarily an EntityInstance)
  jzodSchema: z.record(jzodElement),
})

export type ValueObjectGridRow = z.infer<typeof valueObjectGridRowSchema>;

// ################################################################################################
// ################################################################################################
export const autoGeneratedColumnDef /* extends ag-grid-community.CodDef */= z.object({
  field: z.string(),
  // type: z.string().optional(),
  type: z.enum([
    'tools', 'uuid', 'name', 'foreignKey', 'text', 'number', 'boolean', 'date', 'object', 'array'
  ]).optional(),
  headerName: z.string(),
  cellRenderer: z.any().optional(),
  cellEditor: z.any().optional(),
  cellEditorPopup: z.boolean().optional(),
  editable: z.boolean().optional(),
  resizable: z.boolean().optional(),
  sortable: z.boolean().optional(),
  filter: z.boolean().optional(),
  width: z.number().optional(),
  minWidth: z.number().optional(),
  maxWidth: z.number().optional(),
  valueGetter: z.any().optional(),
  valueSetter: z.any().optional(),
  filterValueGetter: z.any().optional(),
  cellRendererParams: z.object({
    onClickEdit: z.any().optional(),
    onClickDelete: z.any().optional(),
    onClickDuplicate: z.any().optional(),
    // onClickEdit: z.function().args(z.any()).returns(z.void()).optional(),
    // onClickDelete: z.function().args(z.any()).returns(z.void()).optional(),
    // onClickDuplicate: z.function().args(z.any()).returns(z.void()).optional(),
    deploymentUuid: z.string().optional(),
    isFK: z.boolean().optional(),
    columnName: z.string().optional(),
    entityUuid: z.string().nullable().optional(),
    entityDefinition: entityDefinition.optional(),
  }).optional(),
});

export type AutoGeneratedColumnDef /* extends ag-grid-community.CodDef */ =  z.infer<typeof autoGeneratedColumnDef>;

// ################################################################################################
// Value Object Grid Props
export const valueObjectGridPropsSchema = z.object({
  valueObjects: z.array(z.any()), // Array of value objects to display
  jzodSchema: jzodObject, // Schema defining the structure/format
  // columnDefs: z.object({ columnDefs: z.array(z.any()) }).optional(), // Optional explicit column definitions
  columnDefs: z.object({ columnDefs: z.array(autoGeneratedColumnDef) }).optional(), // Optional explicit column definitions
  styles: z.any().optional(),
  theme: z.any().optional(),
  maxRows: z.number().optional(),
  sortByAttribute: z.string().optional(),
  gridType: z.enum(["ag-grid", "glide", "glide-data-grid"]).optional().default("ag-grid"),
  
  // Optional editing capabilities (when EntityInstanceGrid wants to enable editing)
  onRowEdit: z.function().args(z.any()).returns(z.void()).optional(),
  onRowDelete: z.function().args(z.any()).returns(z.void()).optional(),
  onRowDuplicate: z.function().args(z.any()).returns(z.void()).optional(),
  
  // Additional optional props for display
  displayTools: z.boolean().default(false),
  children: z.any().optional(),
});

export type ValueObjectGridProps = z.infer<typeof valueObjectGridPropsSchema>;

